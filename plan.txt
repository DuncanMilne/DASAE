#NOTE DONE ALL EXCEPT SERVER LOAD NOTIFIER

CLIENT  // X indicates I have added it to the interface
- Create auction items X
  - [name, min item value, close time, id] X
  - for auction close times we could ask the user to enter a date and a time in format DD/MM/YYYY and HH/MM/SS and then convert to seconds (handout says it needs to be specified in seconds)
- Bid against auction items X
- View available auction items X
- Query 'finished' auctions X
- Be notified of the auction result
  - Via a callback  X
  - Provide info about bid/auction status   // Need to still provide info
- 'Heartbeat' check that server is still responsive X

SERVER
- Maintain a list of currently active auctions X
- Maintain the state of each auction
  - Server is responsible for identifying and processing 'finished' auctions:
    * Callback to bidders // DONE
    * Remove it from list of active auctions // DONE
    * 'Store' the finished auction's data somehow
- Individual handler threads for each connected client (???) //?
- Retain finished auction info for querying
- Save/restore state from permanent memory
  - Can be used to 'bootstrap' or initialise the server for testing
- Failure detection X
  - Some kind of 'heartbeat' mechanism? X
  - Could have the heartbeat give some info about server load?

kelvin says not to bother with saving/restoring auction state to/from permanent storage

report ideas
reconnecting clients could be an extension
why i have synchronized what i've synchronized
extension possibility - could track all clients and ping them all from the server side. this
would allow the server to only be connected to
when returning server load, it was too difficult to count the number of clients and then count them when connected. Could track them all, when attempting to count conencted clients, ping them all to see
who is still there and remove if a remoteexception occurs.
not done much error handling
discuss the fact that its better to pass objects back by value to the client instead of return strings due to seperation of concerns.
Having it as return strings reduces scope for error and its only simple auction site
move try catches to only surround remote method invocations as opposed to whole methods
when attempting to make 2 million auctions it gets really slow at around 400000, even if it is
done in a multithreaded fashion. this is due to the size of the concurrenthashmap becoming unwieldy as when closing clients and restarting it goes slowly

You should also implement a failure detector for the server to find what its current load is, etc.

You are asked to write a report (of no more than 3000 words) on your auction system discussing your overall design, and how your implementation meets the design goals and requirements. You should make clear (a) which parts of the specification you have actually implemented, (b) whether your solution works as advertised, and (c) how you have tested it. The report should include a discussion of potential extensions that could improve the fault tolerance and availability of your system (you are not expected to implement these extensions!).

Also, a section should be devoted to discussing the performance of your implementation after developing the appropriate test interfaces that will enable you to measure, e.g., max throughput of your system when responding to remote/local invocations, etc. Finally, you should include a section describing how you would expect me to test your system, given the classes, test programs, test data, etc. that you have submitted.
