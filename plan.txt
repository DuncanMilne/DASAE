#NOTE DONE ALL EXCEPT SERVER LOAD NOTIFIER

CLIENT  // X indicates I have added it to the interface
- Create auction items X
  - [name, min item value, close time, id] X
  - for auction close times we could ask the user to enter a date and a time in format DD/MM/YYYY and HH/MM/SS and then convert to seconds (handout says it needs to be specified in seconds)
- Bid against auction items X
- View available auction items X
- Query 'finished' auctions X
- Be notified of the auction result
  - Via a callback  X
  - Provide info about bid/auction status   // Need to still provide info
- 'Heartbeat' check that server is still responsive X

SERVER
- Maintain a list of currently active auctions X
- Maintain the state of each auction
  - Server is responsible for identifying and processing 'finished' auctions:
    * Callback to bidders // DONE
    * Remove it from list of active auctions // DONE
    * 'Store' the finished auction's data somehow
- Individual handler threads for each connected client (???) //?
- Retain finished auction info for querying
- Save/restore state from permanent memory
  - Can be used to 'bootstrap' or initialise the server for testing
- Failure detection X
  - Some kind of 'heartbeat' mechanism? X
  - Could have the heartbeat give some info about server load?

kelvin says not to bother with saving/restoring auction state to/from permanent storage

STILL TO DO
ensure remoteexceptions are caught within methods that do callbacks to the client
pinging server returns server load
work out if scheduleAtFixedRate is better than thread.sleep();

TESTING STUFF
if auctionclient takes an argument "test" create 1k clients

report ideas
reconnecting clients could be an extension
extension possibility - could track all clients and ping them all from the server side. this would allow the server to only be connected to
